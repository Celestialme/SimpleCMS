{
	"extends": "./.svelte-kit/tsconfig.json",

	"compilerOptions": {
		"moduleResolution": "bundler", // which module resolution strategy to use
		"target": "ESNext", // which level of JS support to target
		"module": "ESNext", // which module system to use

		/**
		 * svelte-preprocess cannot figure out whether you have
		 * a value or a type, so tell TypeScript to enforce using
		 * `import type` instead of `import` for Types.
		 */
		"isolatedModules": true, // use an isolated module
		"resolveJsonModule": true, // resolve .json files

		/**
		 * To have warnings / errors of the Svelte compiler at the
		 * correct position, enable source maps by default.
		 */
		"sourceMap": true, // generate source maps
		"esModuleInterop": true, //	emit ECMAScript Module
		"skipLibCheck": true, // skip type checking of lib files

		/**
		 * Typecheck JS in `.svelte` and `.js` files by default.
		 * Disable this if you'd like to use dynamic types.
		 */
		"checkJs": true, // check javascript files
		"allowJs": true, // allow javascript files
		"strict": true, //enforce strict type checking

		"emitDecoratorMetadata": false, //	emit decorator metadata
		"forceConsistentCasingInFileNames": true, // force consistent casing in file names
		"noErrorTruncation": true, // do not truncate error messages

		"types": ["@sveltejs/kit"], //	add types
		//"types": ["bun-types"],
		"noImplicitAny": false,
		"outDir": "../build"
	},

	/**
	 * Use global.d.ts instead of compilerOptions.types
	 * to avoid limiting type declarations.
	 */
	"includes": ["src/**/*.ts", "src/**/*.svelte", "types/**/*.ts"],

	"noUnusedLocals": true,
	"noUnusedParameters": true
	// Path aliases are handled by https://kit.svelte.dev/docs/configuration#alias
	//
	// If you want to overwrite includes/excludes, make sure to copy over the relevant includes/excludes
	// from the referenced tsconfig.json - TypeScript does not merge them in
}
